@inject IJSRuntime jsRuntime

@implements IDisposable

<div @ref="elem" id="@Id" @attributes="@ExtraAttributes"></div>

@* Pass 'this' instance as a cascading parameter to descendants in tree *@
<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    ElementReference elem;

    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> ExtraAttributes { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Id { get; set; } = "calendar";
    [Parameter] public CalendarSettings settings { get; set; }
    [Parameter] public EventCallback<CalendarEventChangeResponse> OnAddEvent { get; set; }
    [Parameter] public EventCallback<CalendarEventChangeResponse> OnUpdateEvent { get; set; }
    [Parameter] public EventCallback<CalendarEventChangeResponse> OnClickEvent { get; set; }

    private CalendarInteropService interop;
    private DotNetObjectReference<FullCalendar> _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interop = new CalendarInteropService(jsRuntime);
            _objRef = DotNetObjectReference.Create(this);
            await interop.SetDotNetReference(_objRef);
            await InitCalendar();
        }
    }

    public async Task InitCalendar()
    {
        await interop.CalendarInit("calendar", settings);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public async Task ChangeResourceFeed(CalendarResourceFeed calendarResourceFeed)
    {
        //var interop = new Services.InteropService(jsRuntime);
        await interop.CalendarChangeResourceFeed(calendarResourceFeed);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public async Task CalendarRefetchEvents()
    {
        await interop.CalendarRefetchEvents();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public async Task ChangeSlotWidth(int value)
    {
        await interop.CalendarSetOption("slotWidth", value);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    [JSInvokable("AddEventCallback")]
    public async Task AddEventCallback(string returnValue)
    {
        try
        {
            var response = JsonConvert.DeserializeObject<CalendarEventChangeResponse>(returnValue);
            await OnAddEvent.InvokeAsync(response);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    [JSInvokable("UpdateEventCallback")]
    public async Task UpdateEventCallback(string returnValue)
    {
        try
        {
            var response = JsonConvert.DeserializeObject<CalendarEventChangeResponse>(returnValue);
            await OnUpdateEvent.InvokeAsync(response);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    [JSInvokable("ClickEventCallback")]
    public async Task ClickEventCallback(string returnValue)
    {
        try
        {
            var response = JsonConvert.DeserializeObject<CalendarEventChangeResponse>(returnValue);
            await OnClickEvent.InvokeAsync(response);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}
