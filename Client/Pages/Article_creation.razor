@page "/article/creation"

@inject HttpClient Http
@using BlazingBlog.Shared

<h1>Cr√©ation d'un article</h1>

<EditForm class="form-article" OnValidSubmit="OnSubmit" Model="article">
    <DataAnnotationsValidator />
    <label for="inputTitle">Title</label>
        <InputText id="inputTitle" class="form-control" placeholder="Title" autofocus @bind-Value="@article.Title" />
    <ValidationMessage For="@(() => article.Title)"/>
    
    <label for="inputUrlImage">UrlImage</label>
        <InputText id="inputUrlImage" class="form-control" placeholder="UrlImage" autofocus @bind-Value="@article.PreviewImageURL" />
    <ValidationMessage For="@(() => article.PreviewImageURL)"/>

    <label for="inputPreviewTitle">PreviewTitle</label>
        <InputText id="inputPreviewTitle" class="form-control" placeholder="PreviewTitle" autofocus @bind-Value="@article.PreviewTitle" />
    <ValidationMessage For="@(() => article.PreviewTitle)"/>

    <label for="inputParagraph">Paragraph</label>
        <InputTextArea id="inputParagraph" class="form-control" placeholder="Paragraph" autofocus @bind-Value="@article.PreviewParagraph" />
    <ValidationMessage For="@(() => article.PreviewParagraph)"/>
 
    <div class="blazing-editor">
        <BlazEditor returnFunction="ValidateContent"/>
    </div>

    <button class="btn btn-lg btn-primary btn-block" type="submit">Add Article</button>

</EditForm>

@code {
    public Article article {get;set;} = new Article{Tags = new List<string>()};
    string ValidateContent(string content)
    {
        return article.Content = content;
    }
    
    async Task OnSubmit() {
        await Http.PostAsJsonAsync("api/Articles/CreateArticle", article);
    }
}