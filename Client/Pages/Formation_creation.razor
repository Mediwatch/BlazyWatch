@page "/formations/creation"
@using Mediwatch.Shared
@inject IJSRuntime JSRuntime;
@inject HttpClient Http;
@inject NavigationManager NavManager

<!--<AuthorizeView Roles="Admin, Tutor">-->


<!--<table>-->
    <h1>Création de formation</h1>

    @if (@validation == 0)
    {
        <EditForm Model="@formTab1" OnValidSubmit="@PostFormation">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <table>
            <tr>
                <td><label for="name">Nom de la formation :</label></td>
                <td>
                    <InputText id="Name" placeholder="Veuillez entrer un nom." @bind-Value="formTab1.Name" />
                </td>
            </tr>
            <tr>
                <td><label for="">Date de la formation :</label></td>
                <td>
                    <InputDate id="startDate" @bind-Value="formTab1.StartDate" Min="2020-01-01" />
                    <p style="display: inline;">~</p>
                    <InputDate id="endDate" @bind-Value="formTab1.EndDate" Min="2020-01-01" />
                </td>
            </tr>
            <tr>
                <td><label for="Description">Description de la formation :</label></td>
                <td>
                    <InputTextArea id="Description" placeholder="Veuillez entrer une description."
                        @bind-Value="formTab1.Description" Rows="10" Cols="50"></InputTextArea>
                </td>
            </tr>
            </table>
            <button type="submit">Suivant</button>
        </EditForm>
    }

    @if (validation == 1)
    {
        <EditForm Model="@formTab2" OnValidSubmit="@PostFormation">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <table>
            <tr>
                <td><label for="Former">Nom du formateur :</label></td>
                <td>
                    <InputText id="Former" placeholder="Veuillez entrer un nom." @bind-Value="formTab2.Former" />
                </td>
            </tr>
            <tr>
                <td><label for="Price">Prix de la formation :</label></td>
                <td>
                    <InputNumber id="Price" @bind-Value="formTab2.Price" />
                </td>
            </tr>
            <tr>
                <td><label for="OrganizationName">Nom de l'organisme :</label></td>
                <td>
                    <InputText id="OrganizationName" placeholder="Veuillez entrer le nom de l'organisme."
                        @bind-Value="formTab2.OrganizationName" />
                </td>
            </tr>
            </table>
            <button type="submit">Suivant</button>
        </EditForm>
    }

    @if (validation == 2)
    {
        <EditForm Model="@formTab3" OnValidSubmit="@PostFormation">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <table>
            <tr>
                <td><label for="Contact">Contact :</label></td>
                <td>
                    <InputText id="Contact" placeholder="Veuillez entrer un contact." @bind-Value="formTab3.Contact" />
                </td>
            </tr>
            <tr>
                <td><label for="Location">Localisation de la formation :</label></td>
                <td>
                    <InputText id="Location" placeholder="Veuillez entrer la localisation de la formation."
                        @bind-Value="formTab3.Location" />
                </td>
            </tr>
            </table>
            <button type="submit">Valider la formation</button>
        </EditForm>
    }

    @if (validation == 3)
    {
        <button type="submit" @onclick=@PostFormation>Créer une nouvelle formation</button>
        <button type="submit" @onclick=@GoBack>Retourner à la page d'accueil</button>
    }
<!--</table>-->

<!--</AuthorizeView>-->
@code
{
    private FormationTemplateTab1 formTab1 { get; set; } = new FormationTemplateTab1();
    private FormationTemplateTab2 formTab2 { get; set; } = new FormationTemplateTab2();
    private FormationTemplateTab3 formTab3 { get; set; } = new FormationTemplateTab3();
    private formation form { get; set; } = new formation();
    private int validation = 0;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("display", validation);
        validation = 0;
    }

    private async void PostFormation()
    {
        validation++;

        if (validation == 3)
        {
            form.Name = formTab1.Name;
            form.StartDate = formTab1.StartDate;
            form.EndDate = formTab1.EndDate;
            form.Description = formTab1.Description;
            form.OrganizationName = formTab2.OrganizationName;
            form.Price = formTab2.Price;
            form.Former = formTab2.Former;
            form.Location = formTab3.Location;
            form.Contact = formTab3.Contact;
            await Http.PostAsJsonAsync("Formation", form);
        }

        if (validation == 4)
        {
            validation = 0;
        }
    }

    private void GoBack()
    {
        validation = 0;
        NavManager.NavigateTo("/");
    }
}