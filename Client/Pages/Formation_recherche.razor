@page "/formations/recherche"

@inject HttpClient Client
@inject IJSRuntime JsRuntime

<label for="filterOption">Filtrer : </label>
<select id="filterOption" @bind="_option">
    <option value="name" selected>Nom</option>
    <option value="location">Localisation</option>
    <option value="organizationName">Organisme</option>
    <option value="former">Formateur</option>
</select>
<label for="searchBar">Rechercher : </label>
<input id="searchBar" @oninput=@Filter placeholder="Entrez votre recherche"/>

@if (_formations == null) {
	<p>En attente d'acquisition des formations...</p>
	<div class="loading-bar"></div>
} else {
	@foreach (var f in _formations) {
		<div class="formation-search-item">
			<h3>@f.Name</h3>
			<p>Du @f.StartDate au @f.EndDate</p>
			<p>Localisation : @f.Location</p>
            <hr />
            <p>Par @f.Former, pour @f.OrganizationName</p>
			<p>Audience : @f.Target</p>
			<p>Plus d'informations <a target="_blank" href=@( $"/formations/{f.id}" )>ici</a></p>
		</div>
	}
}

@code
{
    string Search { get; set; } = "";

    string _option = "name";
    List<formation> _formations = null;
    //List<formation> _filtered = null;

    protected override async Task OnInitializedAsync()
    {
        _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;
        //_filtered = _formations;
        await JsRuntime.InvokeVoidAsync("display", _formations);
    }

    private async void Filter(ChangeEventArgs e)
    {
        try
        {
            //_filtered = _formations.Where(f => f.Name.ToLower().Contains(e.Value.ToString().ToLower())).ToList();
            // Voir pour utiliser le cache si le navigateur ne le fait pas lui-même ?
            _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation/search?" + _option + "=" + e.Value.ToString()) as List<formation>;
        } catch (Exception _)
        {
            _formations.Clear();
        }
        StateHasChanged();
    }
}