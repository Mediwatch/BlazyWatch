@page "/formations/recherche"

@using Mediwatch.Shared
@inject HttpClient client
@inject IJSRuntime JSRuntime

<label for="searchBar">Rechercher : </label>
<input id="searchBar" @oninput=@filter placeholder="Entrez votre recherche"/>

@if (formations == null) {
	<p>En attente d'acquisition des formations...</p>
	<div class="loading-bar"></div>
} else {
	@foreach (var f in filtered) {
		<div style=@style>
			<h3>@f.Name</h3>
			<p>Du @f.StartDate au @f.EndDate</p>
			<p>Localisation : @f.Location</p>
			<p>Audience : @f.Target</p>
			<p>Plus d'informations <a target="_blank" href=@( $"/formations/{f.id}" )>ici</a></p>
		</div>
	}
}

@code
{
	public class FormationInformation
	{
		public string Name { get; set; }
		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public string Location { get; set; }
		public string Contact { get; set; }
		public string OrganizationName { get; set; }
		public decimal Price { get; set; }
		public string Former { get; set; }
		public string Description { get; set; }
		public string Target { get; set; }
		public bool IsRegistered { get; set; }
	}

	string url_base = "/formations/";
	string url = "";

	string style = "border-style: solid; padding: 1px; margin: 20px;";
	string Search { get; set; } = "";

	List<formation> formations = null;
	List<formation> filtered = null;

	protected override async Task OnInitializedAsync()
	{
		formations = await client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;
		filtered = formations;
		JSRuntime.InvokeVoidAsync("display", filtered);
	}

	private void filter(ChangeEventArgs e)
	{
		filtered = formations.Where(f => f.Name.ToLower().Contains(e.Value.ToString().ToLower())).ToList();
	}

	void OnClickFormation(FormationInformation formation)
	{
		formation.IsRegistered = true;
		StateHasChanged();
	}
}