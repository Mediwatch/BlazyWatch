@page "/formations/recherche"

@inject HttpClient Client
@inject IJSRuntime JsRuntime

<label for="searchBar">Rechercher : </label>
<input id="searchBar" @oninput=@Filter placeholder="Entrez votre recherche"/>

@if (_formations == null) {
	<p>En attente d'acquisition des formations...</p>
	<div class="loading-bar"></div>
} else {
	@foreach (var f in _filtered) {
		<div class="formation-search-item">
			<h3>@f.Name</h3>
			<p>Du @f.StartDate au @f.EndDate</p>
			<p>Localisation : @f.Location</p>
			<p>Audience : @f.Target</p>
			<p>Plus d'informations <a target="_blank" href=@( $"/formations/{f.id}" )>ici</a></p>
		</div>
	}
}

@code
{
	string Search { get; set; } = "";

	List<formation> _formations = null;
	List<formation> _filtered = null;

	protected override async Task OnInitializedAsync()
	{
		_formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;
		_filtered = _formations;
		await JsRuntime.InvokeVoidAsync("display", _filtered!);
	}

	private void Filter(ChangeEventArgs e)
	{
		// A voir comment filtrer ici ?
		_filtered = _formations.Where(f => f.Name.ToLower().Contains(e.Value.ToString().ToLower())).ToList();
	}
}