@page "/formations/recherche"

@inject HttpClient Client
@inject IJSRuntime JsRuntime

<label for="filterOption">Filtrer : </label>
<select id="filterOption" @bind="_option">
    <option value="name" selected>Nom</option>
    <option value="location">Localisation</option>
    <option value="organizationName">Organisme</option>
    <option value="former">Formateur</option>
    <option value="tag">Tag</option>
</select>
<label for="searchBar">Rechercher : </label>
<input id="searchBar" @oninput=@Filter placeholder="Entrez votre recherche" />

<div class="container">
    <div class="cards-container">
        @if (_formations == null)
        {
            <p>En attente d'acquisition des formations...</p>
            <div class="loading-bar"></div>
        }
        else
        {
            @foreach (var f in _formations)
            {
                <div>
                    <div class="search-card mid-color">
                        <div class="low-color search-card-triangle " />
                        <div class="search-card-text dark-color">
                            <h3>@f.Name</h3>
                            <p>Du @f.StartDate au @f.EndDate</p>
                            <p>Localisation : @f.Location</p>
                            <p>Audience : @f.Target</p>
                        </div>
                        <a class="search-card-buton high-color" href=@($"/formations/{f.id}")>En savoir plus</a>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code
{
    string Search { get; set; } = "";

    string _option = "name";
    List<tag> _tags = null;
    List<formation> _formations = null;
    //List<formation> _filtered = null;

    /// <summary>
    /// Permet de récupérer l'ensemble des formations depuis la base de données.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;
        _tags = await Client.GetFromJsonAsync<IEnumerable<tag>>("Tag") as List<tag>;
        //_filtered = _formations;
        await JsRuntime.InvokeVoidAsync("display", _formations);
    }

    /// <summary>
    /// Permet de filtrer les formations selon l'événement reçu.
    /// </summary>
    /// <param name="e">L'événement reçu, cela est généralement une modification d'un champ texte.</param>
    /// <returns></returns>
    private async void Filter(ChangeEventArgs e)
    {
        try
        {
            //_filtered = _formations.Where(f => f.Name.ToLower().Contains(e.Value.ToString().ToLower())).ToList();
            // Voir pour utiliser le cache si le navigateur ne le fait pas lui-m�me ?
            if (_option == "tag")
            {
                var tag = _tags.Find(t => t.tag_name.Equals(e.Value.ToString()));

                if (tag == null)
                    return;

                _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation?idtag=" +
                tag.id) as List<formation>;
            }
            else
            {
                _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation/search?" + _option + "=" +
                e.Value.ToString()) as List<formation>;
            }
        }
        catch (Exception q_)
        {
            _formations.Clear();
        }
        StateHasChanged();
    }
}