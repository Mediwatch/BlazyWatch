@page "/formations/{id}"

@inject HttpClient Client
@inject IJSRuntime JsRuntime
@* @inject MediwatchPanier Panier *@

@inject Blazored.LocalStorage.ILocalStorageService Storage

@if (_formation == null)
{
    @if (!_erreur)
    {
        <p>En attente d'acquisition des informations de la formation...</p>
        <div class="loading-bar"></div>
    }
    else
    {
        <p>Formation inexistante, <a href="/">retourner à la page d'accueil ?</a></p>
    }

}
else
{
    <div class="container">
        <FormationItemView f=_formation></FormationItemView>

        @if (_formation.ArticleID != null)
        {
            <ArticleViewer articleName=@_formation.ArticleID></ArticleViewer>
        }

        @if (_info == null || !_info.IsAuthenticated)
        {
            <div id="paypal-button-container" aria-disabled="true"></div>
            <button class="btn btn-primary" disabled>
                Ajouter la formation à mon panier
            </button>
        }
        else
        {
            <div id="paypal-button-container"></div>
            <button class="btn btn-primary" @onclick="@Ajout" data-toggle="modal" data-target="#exampleModalCenter">
                Ajouter la formation à mon panier
            </button>
        }

        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
        aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        @if (added)
                        {
                            <span>Formation déjà ajoutée au panier.</span>
                        }
                        else
                        {
                            <span>Formation correctement ajoutée au panier.</span>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Réduire</button>
                        <button type="button" class="btn btn-primary" @onclick="@Redirection">Voir mon panier</button>
                    </div>
                </div>
            </div>
        </div>

        <PopUp @bind-Activate="popupActivated">
            <PopupBeta></PopupBeta>
        </PopUp>
    </div>
}

@code {
    [Parameter]
    public String Id { get; set; }

    private formation _formation = null;

    private UserInformation _info = null;

    private bool _erreur = false;

    private UserPublic user = null;

    private bool popupActivated = false;

    private bool found = false;

    bool added = false;

    /// <summary>
    /// Permet de voir une formation depuis la base de données en fonction de l'id dans l'url.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _info = await Client.GetFromJsonAsync<UserInformation>("Account/UserInfo");
            _formation = await Client.GetFromJsonAsync<formation>("Formation/" + Id);
            user = await Client.GetFromJsonAsync<UserPublic>("Users/info");
        }
        catch
        {
            _erreur = true;
        }
    }

    /// <summary>
    /// Permet d'initialiser le bouton Paypal et les fonctions associées.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !found)
        {
            var listId = new List<string>();
            listId.Add(Id);
            await JsRuntime.InvokeVoidAsync("init_paypal", listId);
            found = true;
            StateHasChanged();
        }
    }

    private async void Ajout()
    {

        var formations = await Storage.GetItemAsync<List<string>>("formations");

        if (formations == null)
        {
            formations = new List<string>();
        }

        if (formations.Contains(Id))
        {
            Console.WriteLine("Impossible d'ajouter la formation, déjà présente.");
            added = true;
            return;
        }

        formations.Add(Id);

        await Storage.SetItemAsync<List<string>>("formations", formations);
        added = true;

        StateHasChanged();
    }

    private void Redirection()
    {
        JsRuntime.InvokeAsync<object>("open", "/utilisateur/achat", "_blank");
    }
}