@page "/formations/{id}"

@inject HttpClient Client
@inject IJSRuntime JsRuntime
@* @inject MediwatchPanier Panier *@

@inject Blazored.LocalStorage.ILocalStorageService Storage

@if (_formation == null)
{
    @if (!_erreur)
    {
        <p>En attente d'acquisition des informations de la formation...</p>
        <div class="loading-bar"></div>
    }
    else
    {
        <p>Formation inexistante, <a href="/">retourner à la page d'accueil ?</a></p>
    }

}
else
{
    <FormationItemView f=_formation></FormationItemView>

    @if (_formation.ArticleID != null)
    {
        <ArticleViewer articleName=@_formation.ArticleID></ArticleViewer>
    }

    @if (_info == null || !_info.IsAuthenticated)
    {
        <button class="btn btn-primary" @onclick="@Registration" disabled>
            S'inscrire à la formation
        </button>
        <button class="btn btn-primary" @onclick="@Ajout" disabled>
            Ajouter la formation à mon panier
        </button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="@Registration">
            S'inscrire à la formation
        </button>
        <button class="btn btn-primary" @onclick="@Ajout">
            Ajouter la formation à mon panier
        </button>
    }


    <div id="notif" style="border-style: dashed; visibility: @visibility">
        <p>Formation ajoutée correctement au panier.</p>
        <button class="btn btn-secondary" @onclick="@Redirection">Voir mon panier</button>
        <Button class="btn btn-secondary" @onclick="@Disparition">Réduire</Button>
    </div>

    <PopUp @bind-Activate="popupActivated">
        <PopupBeta></PopupBeta>
    </PopUp>
}

@code {
    [Parameter]
    public String Id { get; set; }

    private formation _formation = null;

    private UserInformation _info = null;

    private bool _erreur = false;

    private UserPublic user = null;

    private string visibility = "hidden";

    private bool popupActivated = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _info = await Client.GetFromJsonAsync<UserInformation>("Account/UserInfo");
            _formation = await Client.GetFromJsonAsync<formation>("Formation/" + Id);
            user = await Client.GetFromJsonAsync<UserPublic>("Users/info");

        }
        catch
        {
            _erreur = true;
        }
    }

    private async Task Registration()
    {
        Console.WriteLine("Inscription à la formation en elle-même, passer par Paypal directement ?");
        // Enregistrer ici l'utilisateur à la formation !
        //JSRuntime.InvokeVoidAsync("display", e);

        Console.WriteLine("Inscription à la formation " + Id);
        applicant_session session = new applicant_session();
        session.confirmed = true;
        session.idFormation = Guid.Parse(Id); // string plutôt ?
        session.idUser = user.Id;
        session.payed = true;
        await Client.PostAsJsonAsync("/Users/registeruserformation", session);
        Console.WriteLine("Inscription réussie, devrait être après le Paypal");

        Console.WriteLine("Ici, on crée un faux orderInfo, histoire de pouvoir montrer le fonctionnement des factures avec un achat spécifique.");
        orderInfo info = new orderInfo();
        info.invoiceId = Guid.NewGuid().ToString();
        info.price = (float) _formation.Price;
        await Client.PostAsJsonAsync("Order", info);
        popupActivated = true;
        Console.WriteLine("Facture créée !");

    }

    private async void Ajout()
    {
        Console.WriteLine(("ajout !"));

        var formations = await Storage.GetItemAsync<List<string>>("formations");

        if (formations == null)
        {
            formations = new List<string>();
        }

        if (formations.Contains(Id))
        {
            Console.WriteLine("Impossible d'ajouter la formation, déjà présente.");
            return;
        }

        Console.WriteLine(formations);
        Console.WriteLine(formations.Count);

        formations.Add(Id);

        Console.WriteLine(formations);
        Console.WriteLine(formations.Count);

        await Storage.SetItemAsync<List<string>>("formations", formations);

        visibility = "visible";

        StateHasChanged();
    }

    private void Redirection()
    {
        JsRuntime.InvokeAsync<object>("open", "/utilisateur/achat", "_blank");
    }

    private void Disparition()
    {
        visibility = "hidden";
        StateHasChanged();
    }
}