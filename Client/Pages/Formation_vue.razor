@page "/formations/{id}"

@inject HttpClient Client
@inject IJSRuntime JsRuntime
@* @inject MediwatchPanier Panier *@

@inject Blazored.LocalStorage.ILocalStorageService Storage

@if (_formation == null)
{
    @if (!_erreur)
    {
        <p>En attente d'acquisition des informations de la formation...</p>
        <div class="loading-bar"></div>
    } else {
        <p>Formation inexistante, <a href="/">retourner à la page d'accueil ?</a></p>
    }
    
} else {
    <FormationItemView f=_formation></FormationItemView>
    
     
    @if (_info == null || !_info.IsAuthenticated)
    {
        <button class="btn btn-primary" @onclick="@Registration" disabled>
            S'inscrire à la formation
        </button>
        <button class="btn btn-primary" @onclick="@Ajout" disabled>
            Ajouter la formation à mon panier
        </button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="@Registration">
            S'inscrire à la formation
        </button>
        <button class="btn btn-primary" @onclick="@Ajout">
            Ajouter la formation à mon panier
        </button>
    }

    <hr/>
    
    <ArticleViewer articleName=@_formation.ArticleID></ArticleViewer>
}

@code {
    [Parameter]
    public String Id {get; set;}

    private formation _formation = null;

    private UserInformation _info = null;

    private bool _erreur = false;

    //private Panier _panier = Panier.Get;

    protected override async Task OnInitializedAsync()
    {
        try {
            _info = await Client.GetFromJsonAsync<UserInformation>("Account/UserInfo");
            _formation = await Client.GetFromJsonAsync<formation>("Formation/" + Id);
        } catch {
            _erreur = true;
        }
    }

    private async Task Registration()
    {
        // Enregistrer ici l'utilisateur à la formation !
        //JSRuntime.InvokeVoidAsync("display", e);
    }

    private async void Ajout()
    {
        Console.WriteLine(("ajout !"));

        var formations = await Storage.GetItemAsync<List<string>>("formations");

        if (formations == null)
        {
            formations = new List<string>();
        }

        if (formations.Contains(Id))
        {
            Console.WriteLine("Impossible d'ajouter la formation, déjà présente.");
            return;
        }

        Console.WriteLine(formations);
        Console.WriteLine(formations.Count);

        formations.Add(Id);

        Console.WriteLine(formations);
        Console.WriteLine(formations.Count);

        await Storage.SetItemAsync<List<string>>("formations", formations);

        //Panier.Instance.Ajout(Id);
        //Panier.Ajout(Id);
        //_panier.ajout(Id);
    }
}