@page "/formations/{id}"

@inject HttpClient Client
@inject IJSRuntime JsRuntime

@if (_formation == null)
{
    @if (!_erreur)
    {
        <p>En attente d'acquisition des informations de la formation...</p>
        <div class="loading-bar"></div>
    } else {
        <p>Formation inexistante, <a href="/">retourner à la page d'accueil ?</a></p>
    }
    
} else {
    <FormationItemView f=_formation></FormationItemView>
    <form>
        @if (_info == null || !_info.IsAuthenticated)
        {
            <input type="submit" disabled value="S'inscrire à la formation"/>
        } else {
            <input type="submit" value="S'inscrire à la formation" @oninput=@Registration/>
        }
    </form>

    <ArticleViewer articleName=@_formation.ArticleID></ArticleViewer>
}

@code {
    [Parameter]
    public String Id {get; set;}

    private formation _formation = null;

    private UserInformation _info = null;

    private bool _erreur = false;

    protected override async Task OnInitializedAsync()
    {
        try {
            _info = await Client.GetFromJsonAsync<UserInformation>("Account/UserInfo");
            _formation = await Client.GetFromJsonAsync<formation>("Formation/" + Id);
        } catch {
            _erreur = true;
        }
    }

    private async Task Registration()
    {
        // Enregistrer ici l'utilisateur à la formation !
        //JSRuntime.InvokeVoidAsync("display", e);
    }
}