@page "/"
@inject HttpClient Client
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Index> Localizer

<main>
    <h1>@Localizer["WelcomeMessage"]</h1>
    <div class="online-formations">
        <div class="text-box">
            <h3>@Localizer["FormationsInvite"]</h3>
        </div>
        <button class="buttons">Formations en ligne 1</button>
        <button class="buttons">Formations en ligne 2</button>
    </div>
    <SharedComponent.LocalizationButton.LocalizationButton />
    <h2>@Localizer["Popular"]</h2>
    <div class="formations-list">
        @if (_formations == null) {
            <p>@Localizer["Unavaillable"]</p>
        } else {
            @foreach (var f in _formations)
            {
                <div class="formation" @onclick="@(e => affichage_formation(@f.id))">
                    <div class="formation-img-div">
                        <img class="formation-img" src="images/palpatine.jpg"/>
                        <h3>@f.Name</h3>
                        <h4>@f.Former, @f.OrganizationName</h4>
                    </div>
                    <div class="formation-informations">
                        <h3>@f.StartDate</h3>
                    </div>
                </div>
            }
        }
    </div>
</main>

<PaymentComponent price="0.01"></PaymentComponent>

@code {

    private List<formation> _formations = null;

    protected override async Task OnInitializedAsync()
    {
        _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;
        await JsRuntime.InvokeVoidAsync("display", await Client.GetFromJsonAsync<IEnumerable<formation>>("Formation"));
    }

    private void affichage_formation(int id)
    {
        JsRuntime.InvokeAsync<object>("open", "/formations/" + id.ToString(), "_blank");
    }
}