@page "/"
@inject HttpClient client
@inject IJSRuntime JSRuntime
@inject Microsoft.Extensions.Localization.IStringLocalizer<Index> localizer

<main>
    <h1>Mediwatch votre formation au bout de vos doigts!</h1>
    <div class="online-formations">
        <div class="text-box">
            <h3>@localizer["FormationsInvite"]</h3>
        </div>
        <button class="buttons">Formations en ligne 1</button>
        <button class="buttons">Formations en ligne 2</button>
    </div>
    <SharedComponent.LocalizationButton.LocalizationButton />
    <h2>Formations populaires</h2>
    <div class="formations-list">
        @if (formations == null) {
            <p>Pas de formations disponibles.</p>
        } else {
            @foreach (var f in formations)
            {
                <div class="formation" @onclick="@(e => affichage_formation(@f.id))">
                    <div class="formation-img-div">
                        <img class="formation-img" src="images/palpatine.jpg"/>
                        <h3>@f.Name</h3>
                        <h4>@f.Former, @f.OrganizationName</h4>
                    </div>
                    <div class="formation-informations">
                        <h3>@f.StartDate</h3>
                    </div>
                </div>
            }
        }
    </div>
</main>

<PaymentComponent price="0.01"></PaymentComponent>

@code {

    private List<formation> formations = null;

    protected override async Task OnInitializedAsync()
    {
        formations = await client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;
        await JSRuntime.InvokeVoidAsync("display", await client.GetFromJsonAsync<IEnumerable<formation>>("Formation"));
    }

    private void affichage_formation(int id)
    {
        JSRuntime.InvokeAsync<object>("open", "/formations/" + id.ToString(), "_blank");
    }
}