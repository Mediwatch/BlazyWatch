@page "/recherche"
@inject HttpClient client
@inject IJSRuntime JSRuntime

<label for="searchBar">Rechercher : </label>
<input id="searchBar" @bind-value="Search" @bind-value:event="oninput" placeholder="Rechercher"/>


@if (formations.Count == 0) {
    <div class="loading-bar"></div>
} else
{
    @foreach (var formation in FilteredFormations) {
        /*@if (formations.IsRegistered) {
            newStyle = style + "background-color: #e6e6e6;";
        } else {
            newStyle = style + "background-color: #6e6e6e;";
        }*/
        //<div style=@newStyle @onclick="@(e => OnClickFormation(@formation))">
		<div style=@newStyle>
            <h3>@formation.formationName</h3>
            <p>Début, @formation.createdAt, Durée : @formation.formationTime</p>
        </div>
    }
}


<!--Calendrier-->
<!--Afficher en premier lieu toutes les formations (?).-->
<!--Bouton pour n'afficher que les formations dans lesquelles l'utilisateur est inscrit.-->
<!--Bouton pour n'afficher que ses souhaits de formation.-->
<!-- Début Test -->
<!--<Mediwatch.Client.Pages.Calendar Month=@localDateTime.Month Year=localDateTime.Year/>-->
<hr>
<div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:100vh;'>
        <div class="dhx_cal_navline">
            <div class="dhx_cal_prev_button">&nbsp;</div>
            <div class="dhx_cal_next_button">&nbsp;</div>
            <div class="dhx_cal_today_button"></div>
            <div class="dhx_cal_date"></div>
            <div class="dhx_cal_tab" name="day_tab"></div>
            <div class="dhx_cal_tab" name="week_tab"></div>
            <div class="dhx_cal_tab" name="month_tab"></div>
        </div>
        <div class="dhx_cal_header"></div>
        <div class="dhx_cal_data"></div>
</div>
<p>&copy; <a href="https://dhtmlx.com/">dhtmlx</a></p>
<input type="checkbox" @onclick="@(e => SelectMine())" id="select-mine">
<label for="select-mine">Formations où je suis inscrit(e)</label>
<!--<CalendarWidget Month=@localDateTime.Month Year=localDateTime.Year/>-->
<!-- Fin Test -->



@code
{
	string style = "border-style: solid; padding: 1px; margin: 20px;";
	string newStyle = "";
	string Search { get; set; } = "";

	List<formation> formations = new List<formation>();
	List<formation> FilteredFormations = new List<formation>();

		/*
	private DateTime localDateTime = DateTime.Now;
	private void Test()
	{
		int n = 10;
		for (int i = 0; i < n; i += 1) {
			formations.Add(new FormationTemplate());
		}

		Random gen = new Random();
		DateTime RandomDay()
		{
    		DateTime start = new DateTime(2020, 1, 1);
			DateTime end = new DateTime(2021, 1, 1);
    		int range = (end - start).Days;
    		return start.AddDays(gen.Next(range));
		}
		foreach (var (formation, idx) in formations.Select((value, i) => (value, i)))
		{
			formation.Name = $"Test {idx}";

			DateTime d1 = RandomDay();
			DateTime d2 = RandomDay();
			List<DateTime> l = new List<DateTime>{d1, d2};
			formation.StartDate = l.Min();
			formation.EndDate = l.Max();

			formation.Id = idx;

			JSRuntime.InvokeVoidAsync("addDXCalendearEvent", formation, "blue");
		}
	}*/

	class F {
			public F(formation formation, int idx) {
				this.f = formation;
				this.i = idx;
			}
			public formation f {get; set;}
			public int i {get; set;}
		};

	protected override async void OnInitialized()
	{
		formations = await client.GetFromJsonAsync<IEnumerable<formation>>("Formation") as List<formation>;

			foreach (var (formation, idx) in formations.Select((value, i) => (value, i))) {
				await JSRuntime.InvokeVoidAsync("addDXCalendearEvent", new F(formation, idx), "blue");
			}

		//FilteredFormations = formations.Where(i => i.formationName.ToLower().Contains(Search.ToLower())).ToList();
		//formations = await client.GetJsonAsync<List<FormationTemplate>>("api/Formation");
		//Test(); // Demo
		//FilteredFormations = formations;
	}


	void OnClickFormation(FormationTemplate formation)
	{
		//var error = await client.GetAsync("/Subscribe?name=" + formation.Name);
		/*formation.IsRegistered = !formation.IsRegistered;

		String r = " Inscrit";
		if (formation.IsRegistered) {
			JSRuntime.InvokeVoidAsync("addDXCalendearEvent", formation, "green");
			formation.Name += r;
		} else {
			formation.Name = formation.Name.Remove(formation.Name.Length - r.Length);
			JSRuntime.InvokeVoidAsync("addDXCalendearEvent", formation, "blue");
			//JSRuntime.InvokeVoidAsync("removeDXCalendearEvent", formation);
		}
		StateHasChanged();*/
	}

	void SelectMine() {
		
	}
}