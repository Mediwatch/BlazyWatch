@page "/recherche"
<!--
@using Mediwatch.Shared
-->
@inject HttpClient client
@inject IJSRuntime JSRuntime

<label for="searchBar">Rechercher : </label>
<input id="searchBar" @bind-value="Search" @bind-value:event="oninput" placeholder="Rechercher"/>


@if (formations.Count == 0) {
    <div class="loading-bar"></div>
} else
{
    @foreach (var formation in FilteredFormations) {
        @if (formation.IsRegistered) {
            newStyle = style + "background-color: #e6e6e6;";
        } else {
            newStyle = style + "background-color: #6e6e6e;";
        }
        <div style=@newStyle @onclick="@(e => OnClickFormation(@formation))">
            <h3>@formation.Name</h3>
            <p>Du @formation.StartDate au @formation.EndDate</p>
        </div>
    }
}
@code
{
	string style = "border-style: solid; padding: 1px; margin: 20px;";
	string newStyle = "";
	string Search { get; set; } = "";
	List<FormationTemplate> formations = new List<FormationTemplate>();
	List<FormationTemplate> FilteredFormations = new List<FormationTemplate>();

	protected override void OnInitialized()
	{
		//formations = await client.GetJsonAsync<List<FormationTemplate>>("api/Formation");
		formations.Add(new FormationTemplate());
		formations.Add(new FormationTemplate());
		formations.Add(new FormationTemplate());
		formations.Add(new FormationTemplate());
		formations.Add(new FormationTemplate());
		formations.Add(new FormationTemplate());
		formations.Add(new FormationTemplate());

		// Demo fix.
		FilteredFormations = formations;
	}

	//List<FormationTemplate> FilteredFormations => formations.Where(i => i.Name.ToLower().Contains(Search.ToLower())).ToList();

	void OnClickFormation(FormationTemplate formation)
	{
		//var error = await client.GetAsync("/Subscribe?name=" + formation.Name);
		formation.IsRegistered = true;
		StateHasChanged();
	}
}