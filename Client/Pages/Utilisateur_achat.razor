@page "/utilisateur/achat"
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject HttpClient Client
@inject IJSRuntime JsRuntime



<h2>Votre panier</h2>

<div class="container">
@if (formations.Count == 0)
{
    <p>Votre panier est vide.</p>
}
else
{
    @foreach (var f in formations)
    {
        var tmp_f = @f;
        <div class="achat-formation">
        <h4>@f.Name <i class="fas fa-trash" @onclick="@(() => SuppressionFormation(tmp_f))"></i></h4>
        <p>Du @f.StartDate au @f.EndDate, par @f.Former</p>
        <br />
        <p>Coût : @f.Price €</p>
        </div>
    }
    <input type="button" class="btn btn-primary" @onclick="(() => Payer())" value="Payer mon panier" />
}
</div>


@code {

    private List<formation> formations = new List<formation>();

    private List<string> fs = null;

    /// <summary>
    /// Permet de récupérer les formations depuis le stockage local de l'utilisateur et de les afficher ensuite sur la page.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        fs = await Storage.GetItemAsync<List<string>>("formations");

        if (fs == null)
        {
            Console.WriteLine("Panier vide.");
        }
        else
        {
            Console.WriteLine(">>>>" + fs.Count);

            foreach (var id in fs)
            {
                formations.Add(await Client.GetFromJsonAsync<formation>("Formation/" + id));
            }

            await InvokeAsync(() =>
            {
                StateHasChanged();
            });

        }
    }

    /// <summary>
    /// Permet de supprimer une formation du panier d'achat et du stockage local.
    /// </summary>
    /// <param name="f">La formation à supprimer</param>
    /// <returns></returns>
    private async void SuppressionFormation(formation f)
    {
        Console.WriteLine("Suppression de la formation du panier.");
        formations.Remove(f);
        fs.Remove(f.id.ToString());
        await Storage.SetItemAsync<List<string>>("formations", fs);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    /// <summary>
    /// Permet de payer les différentes formations dans le panier, de créer les factures associées et d'inscrire l'utilisateur aux formations.
    /// </summary>
    /// <returns></returns>
    private async void Payer()
    {
        orderInfo info = new orderInfo();
        info.invoiceId = Guid.NewGuid().ToString();

        fs.ForEach(async _f =>
        {
            formation f = await Client.GetFromJsonAsync<formation>("Formation/" + _f);
            info.price += (float)f.Price;
        });

        Console.WriteLine("Appeler ici POST /Order/ avec orderInfo correctement rempli.");

        Console.WriteLine("Inscription à la formation en elle-même, passer par Paypal directement ?");
        // Enregistrer ici l'utilisateur à la formation !
        //JSRuntime.InvokeVoidAsync("display", e);


        applicant_session session = new applicant_session();
        session.confirmed = true;
        session.payed = true;

        var user = await Client.GetFromJsonAsync<UserPublic>("Users/info");

        fs.ForEach(async _f =>
        {
            formation f = await Client.GetFromJsonAsync<formation>("Formation/" + _f);

            session.idFormation = f.id; // string plutôt ?
            session.idUser = user.Id;


            Console.WriteLine("Inscription à la formation " + f.id);
            await Client.PostAsJsonAsync("/Users/registeruserformation", session);
            Console.WriteLine("Inscription réussie, devrait être après le Paypal");
            Console.WriteLine("Chaque formation devrait être ajoutée ici au fur et à mesure dans info, afin de générer correctement la facture");
        });
        
        await JsRuntime.InvokeVoidAsync("init_paypal", "");
        Console.WriteLine("Ici, on crée un faux orderInfo, histoire de pouvoir montrer le fonctionnement des factures avec un achat spécifique.");
        info.invoiceId = Guid.NewGuid().ToString();
        await Client.PostAsJsonAsync("Order", info);
        Console.WriteLine("Facture créée !");
    }

}