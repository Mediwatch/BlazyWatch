@page "/utilisateur/achat"
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject HttpClient Client
@inject IJSRuntime JsRuntime
@inject NavigationManager navman

<h2>Votre panier</h2>

<div class="container">
@if (formations.Count == 0)
{
    <p>Votre panier est vide.</p>
}
else
{
    @foreach (var f in formations)
    {
        var tmp_f = @f;
        <div class="achat-formation">
        <h4><span @onclick="@(() => VoirFormation(tmp_f))">@f.Name</span> <i class="fas fa-trash" @onclick="@(() => SuppressionFormation(tmp_f))"></i></h4>
        <p>Du @f.StartDate au @f.EndDate, par @f.Former</p>
        <br />
        <p>Coût : @f.Price €</p>
        </div>
    }
    @* <input type="button" class="btn btn-primary" @onclick="(() => Payer())" value="Payer mon panier" /> *@
    <div id="paypal-button-container"></div>
}
</div>


@code {
    private bool found = false;
    private List<formation> formations = new List<formation>();

    private List<string> fs = null;

    /// <summary>
    /// Permet de récupérer les formations depuis le stockage local de l'utilisateur et de les afficher ensuite sur la page.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        fs = await Storage.GetItemAsync<List<string>>("formations");

        if (fs == null)
        {
            Console.WriteLine("Panier vide.");
        }
        else
        {
            Console.WriteLine(">>>>" + fs.Count);
            foreach (var id in fs)
            {
                formations.Add(await Client.GetFromJsonAsync<formation>("Formation/" + id));
            }
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            
            ///
            var listId = new List<string>();
            foreach (var it in formations)
            {
                listId.Add(it.id.ToString()); 
            }
            await JsRuntime.InvokeVoidAsync("init_paypal", listId);
            ///
        }
    }

    /// <summary>
    /// Permet de supprimer une formation du panier d'achat et du stockage local.
    /// </summary>
    /// <param name="f">La formation à supprimer</param>
    /// <returns></returns>
    private async void SuppressionFormation(formation f)
    {
        Console.WriteLine("Suppression de la formation du panier.");
        formations.Remove(f);
        fs.Remove(f.id.ToString());
        await Storage.SetItemAsync<List<string>>("formations", fs);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void VoirFormation(formation f)
    {
        await JsRuntime.InvokeAsync<object>("open", "/formations/" + f.id.ToString(), "_blank");
    }
}