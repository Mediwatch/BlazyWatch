@page "/utilisateur/calendrier"
@inject HttpClient Client
@inject IJSRuntime JsRuntime

@if (info_user != null) {
    <a href=@("Users/exportCalendar/" + info_user.Id.ToString() + "/calendar.ics") download target="_blank" class="btn btn-info">Exporter le calendrier</a>
    <input type="text" class="input-lg" readonly value="Lien du calendrier : @(Client.BaseAddress + "Users/exportCalendar/" + info_user.Id.ToString() + "/calendar.ics")" />
}

<div id="calendrier" class="dhx_cal_container" style='width:100%; height:100vh;'>
    <div class="dhx_cal_navline">
        <div class="dhx_cal_prev_button">&nbsp;</div>
        <div class="dhx_cal_next_button">&nbsp;</div>
        <div class="dhx_cal_today_button"></div>
        <div class="dhx_cal_date"></div>
        <div class="dhx_cal_tab" name="day_tab"></div>
        <div class="dhx_cal_tab" name="week_tab"></div>
        <div class="dhx_cal_tab" name="month_tab"></div>
    </div>
    <div class="dhx_cal_header"></div>
    <div class="dhx_cal_data"></div>
</div>
<p>&copy; <a href="https://dhtmlx.com/">dhtmlx</a></p>

@code {

    List<formation> _formations = new List<formation>();
    public UserPublic info_user = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initDXCalendar");
            info_user = await Client.GetFromJsonAsync<UserPublic>("Users/info");
            _formations = await Client.GetFromJsonAsync<IEnumerable<formation>>("Users/formation/" + info_user.Id) as List<formation>;

            foreach (var f in _formations)
            {
                await JsRuntime.InvokeVoidAsync("addDXCalendarEvent", f, "blue");
            }
            this.StateHasChanged();
        }
    }
}