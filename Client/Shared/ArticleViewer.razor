@using Microsoft.AspNetCore.WebUtilities;
@using Newtonsoft.Json;
@using BlazingEditor.BasicBlazeEditComponent;
@using BlazingBlog.Shared

@inject IJSRuntime JsRuntime
@inject HttpClient Http


@if(_article != null) {
    <h1 class="article-viewer-title">@_article.Title</h1>
}

@if (_render != null)
{
    <BlazeEditViewer @bind-Render="_render">
        <BlazEditParagraph Class="article-viewer-paragraph"/>
        <BlazEditImage ClassImageContainer="article-viewer-image-container" ClassImage="article-viewer-image"/>
        <BlazeEditHeader/>
        <BlazEditSpacer Content='<div class=\"spacer\"></div>'></BlazEditSpacer>
    </BlazeEditViewer>
}

@code {
    Uri _url;
    Article _article;

    [Parameter]
    public string articleName {get;set;}

    private BlazingRender _render = null;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender && articleName != "NO_ID") {
            Console.WriteLine(articleName);
            _article = await Http.GetFromJsonAsync<Article>($"api/Articles/GetArticle?name={articleName}");
            //Console.WriteLine(article.Content)
            await JsRuntime.InvokeVoidAsync("display", _article);
            if (_article != null)
            {
                _render = JsonConvert.DeserializeObject<BlazingRender>(_article.Content);
                if (_render != null)
                {
                    StateHasChanged();
                }
            }
        }
    }
}