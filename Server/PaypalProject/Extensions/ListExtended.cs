/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14 
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green
       Template Version.  .  .  .  .  20181020 001
       Author .  .  .  .  .  .  .  .  Delaney

           .___,
        ___('v')___
        `"-\._./-"'
            ^ ^

*********************************************************/


using System;
using System.Collections.Generic;


namespace Delaney
{
    public class ListExtended<T> : List<T>
    {
        #region Constructors
        public ListExtended() : base(){ }
        public ListExtended(IEnumerable<T> collection) : base(collection){ }
        public ListExtended(int capacity) : base(capacity) { }
        #endregion

        #region Properties
        public bool IsRemoved { get; set; }
        #endregion

        #region Methods
        public new void Clear()
        {
            base.Clear();
            IsRemoved = true;
        }

        public new bool Remove(T item)
        {
            IsRemoved = base.Remove(item);

            return IsRemoved;
        }

        public new int RemoveAll(Predicate<T> match)
        {
            int totalRemoved = base.RemoveAll(match);
            IsRemoved = totalRemoved > 0;

            return totalRemoved;
        }

        public new void RemoveAt(int index)
        {
            try
            {
                base.RemoveAt(index);
                IsRemoved = true;
            }
            catch
            {
                throw;
            }
        }

        public new void RemoveRange(int index, int count)
        {
            try
            {
                base.RemoveRange(index, count);
                IsRemoved = true;
            }
            catch
            {
                throw;
            }
        }
        #endregion
    }
}