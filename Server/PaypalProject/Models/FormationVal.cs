/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14 
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20200306 002
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.



* GetModels()
  Return a model containing propeties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get {user class pascal plural} who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Mediwatch;

namespace Models
{
    public partial class FormationVal
    {
        private Services.Data.Core.Domain.FormationPaypal _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public FormationVal ()
        {
            _core = new Services.Data.Core.Domain.FormationPaypal();
        }
        public FormationVal(Services.Data.Core.Domain.FormationPaypal core)
        {
            _core = core ??   
	        throw new NullReferenceException("The Services.Data.Core.Domain.Basket cannot be null");
        }
        #endregion

        #region Properties
        public Services.Data.Core.Domain.FormationPaypal GetCore()
        {
            return _core;
        }

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [DisplayName("Id")]
        public int? Id
        {
            get
            {
                return _core.Id;
            }
            set
            {
                if (_core.Id != value)
                    _core.Id = value;
            }
        }
        #endregion

        #region CurrencyCode
        [Required]
        [StringLength(3)]
        [DisplayName("Currency Code")]
        public string CurrencyCode
        {
            get
            {
                return _core.CurrencyCode;
            }
            set
            {
                if (_core.CurrencyCode != value)
                    _core.CurrencyCode = value;
            }
        }
        #endregion

        #region CurrencySymbol
        [Required]
        [StringLength(1)]
        [DisplayName("Currency Symbol")]
        public string CurrencySymbol
        {
            get
            {
                return _core.CurrencySymbol;
            }
            set
            {
                if (_core.CurrencySymbol != value)
                    _core.CurrencySymbol = value;
            }
        }
        #endregion

        #region Discount
        [Required]
        [DisplayName("Discount")]
        public decimal Discount
        {
            get
            {
                return _core.Discount;
            }
            set
            {
                if (_core.Discount != value)
                    _core.Discount = value;
            }
        }
        #endregion

        private List<Models.Product> _products; 
        public List<Models.Product> Products 
        {
            get
            {
                if (_products == null)
                {
                    _products = new List<Product>();

                    if (_core.Products != null)
                    {
                        foreach (var core in _core.Products)
                            _products.Add(new Models.Product(core));
                    }
                }

                return _products;
            }
            set
            {
                _products = value;
            }
        }

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get
            {
                return _core.CreatedDate;
            }
            set
            {
                if (_core.CreatedDate!= value)
                    _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString
        {
            get
            {
                return CreatedDate?.ToString(Settings.DateFormatShort);
            }
        }



        [DisplayName("Date")]
        public string DateDisplayed
        {
            get
            {
                return CreatedDate?.ToString("yyyy-MM-dd");
            }
        }

        [DisplayName("Date Time")]
        public string DateTimeDisplayed
        {
            get
            {
                return CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
            }
        }
        #endregion

        #region GUID
        [DisplayName("GUID")]
        public string GUID
        {
            get
            {
                return _core.GUID;
            }
            set
            {
                if (_core.GUID != value)
                    _core.GUID = value;
            }
        }
        #endregion


        public bool IsSelected { get; set; }
    }
}