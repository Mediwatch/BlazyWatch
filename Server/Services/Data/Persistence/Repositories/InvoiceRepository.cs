/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20200428 002
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

*********************************************************/

using System;
using System.Linq;
using System.Collections.Generic;
using System.Linq.Expressions;


namespace Services.Data.Persistence.Repositories
{
    public partial class InvoiceRepository : Core.Repositories.IInvoiceRepository
    {
        private readonly UnitOfWork _unitOfWork;

        public InvoiceRepository(UnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public bool IncludeDeleted { get; set; }

        public Core.Domain.Invoice Get(int? id)
        {
            return UnitOfWork.DataSet.Invoices
                                     .SingleOrDefault(x => x.Id == id);
        }

        public Core.Domain.Invoice SingleOrDefault(Func<Core.Domain.Invoice, bool> predicate)
        {
            return UnitOfWork.DataSet.Invoices
                                     .Where(predicate)
                                     .FirstOrDefault();
        }

        public bool Add(Core.Domain.Invoice entity)
        {
            if(entity == null)
                return false;

            entity.CreatedDate = DateTime.Now;
            _unitOfWork.Add(entity);

            return true;        
        }

        public bool AddRange(IEnumerable<Core.Domain.Invoice> entities)
        {
            if(entities == null)
                return false;

            foreach(var entity in entities)
            {
                entity.CreatedDate = DateTime.Now;

                _unitOfWork.Add(entity);
            }

            return true;
       }


        public IEnumerable<Core.Domain.Invoice> GetAll()
        {
            return UnitOfWork.DataSet.Invoices
;
        }

        public IEnumerable<Core.Domain.Invoice> Find(Func<Core.Domain.Invoice, bool> predicate)
        {
            return UnitOfWork.DataSet.Invoices
                                     .Where(predicate);
        }



        public DataStoreResult Remove(int id)
        {
            var entity = Get(id);

            return Remove(entity);
        }

        public DataStoreResult Remove(Core.Domain.Invoice entity)
        {
            return _unitOfWork.Delete(entity);
        }

        public DataStoreResult RemoveRange(IEnumerable<Core.Domain.Invoice> entities)
        {
            return _unitOfWork.Delete(entities);
        }
    }
}

