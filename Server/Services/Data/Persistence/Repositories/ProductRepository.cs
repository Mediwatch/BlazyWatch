/*********************************************************
       Code Generated By  .  .  .  .  Delaney's Script Bot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Version.  .  .  .  .  .  .  .  10.0.0.14
       Build  .  .  .  .  .  .  .  .  20191113 216
       Template Name.  .  .  .  .  .  Project Green 2.0
       Template Version.  .  .  .  .  20200428 002
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

*********************************************************/

using System;
using System.Linq;
using System.Collections.Generic;
using System.Linq.Expressions;


namespace Services.Data.Persistence.Repositories
{
    public partial class ProductRepository : Core.Repositories.IProductRepository
    {
        private readonly UnitOfWork _unitOfWork;

        public ProductRepository(UnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public bool IncludeDeleted { get; set; }

        public Core.Domain.Product Get(int? id)
        {
            return UnitOfWork.DataSet.Products
                                     .SingleOrDefault(x => x.Id == id);
        }

        public Core.Domain.Product SingleOrDefault(Func<Core.Domain.Product, bool> predicate)
        {
            return UnitOfWork.DataSet.Products
                                     .Where(predicate)
                                     .FirstOrDefault();
        }

        public bool Add(Core.Domain.Product entity)
        {
            if(entity == null)
                return false;

            entity.CreatedDate = DateTime.Now;
            _unitOfWork.Add(entity);

            return true;        
        }

        public bool AddRange(IEnumerable<Core.Domain.Product> entities)
        {
            if(entities == null)
                return false;

            foreach(var entity in entities)
            {
                 entity.CreatedDate = DateTime.Now;

                _unitOfWork.Add(entity);
            }

            return true;
       }


        public IEnumerable<Core.Domain.Product> GetAll()
        {
            return UnitOfWork.DataSet.Products
;
        }

        public IEnumerable<Core.Domain.Product> Find(Func<Core.Domain.Product, bool> predicate)
        {
            return UnitOfWork.DataSet.Products
                                     .Where(predicate);
        }

        public IEnumerable<Core.Domain.Product> GetWithBackets(int pageIndex, int pageSize = 10)
        {
            var entities = UnitOfWork.DataSet.Products
                                             .Skip(pageIndex * pageSize)
                                             .Take(pageSize);

            foreach(var entity in entities)
                _unitOfWork.GetFormation(entity);

            return entities;
        }
        public void Get(Core.Domain.FormationPaypal basket)
        {
                if(basket == null)
                    return;

                var lst = UnitOfWork.DataSet.Products
                                            .Where(x => x.FormationId == basket.Id)
                                            .ToList();

                basket.Products = lst;
        }
        public Core.Domain.Product GetWithParents(int id)
        {
            var entity = UnitOfWork.DataSet.Products
                                           .SingleOrDefault(x => x.Id == id);

            _unitOfWork.GetFormation(entity);

            return entity;
        }

        public Core.Domain.Product GetWithChildren(int id)
        {
            var entity = UnitOfWork.DataSet.Products
                                           .SingleOrDefault(x => x.Id == id);

            return entity;
        }
        public Core.Domain.Product GetWithFamily(int id)
        {
            var entity = UnitOfWork.DataSet.Products
                                           .SingleOrDefault(x => x.Id == id);
            _unitOfWork.GetFormation(entity);

            return entity;
        }
        public Core.Domain.Product Get(string name)
        {
            if (string.IsNullOrEmpty(name))
                return null;

            return UnitOfWork.DataSet.Products
                                     .SingleOrDefault(x => x.Name == name);
        }
        public DataStoreResult Remove(int id,
                                      out string errorMessage)
        {
            var entity = Get(id);

            if (entity == null)
            {
                errorMessage = "";
                return DataStoreResult.Success;
            }

            return Remove(entity, out errorMessage);
        }

        public DataStoreResult Remove(Core.Domain.Product entity,
                                      out string errorMessage)
        {
            errorMessage = "";

            if (entity == null)
            {
                errorMessage = "";
                return DataStoreResult.Success;
            }

            return _unitOfWork.Delete(entity);
        }

        public DataStoreResult RemoveRange(IEnumerable<Core.Domain.Product> entities,
                                           out string errorMessage)
        {
            if (entities == null)
            {
                errorMessage = "The products are present";
                return DataStoreResult.Failed;
            }

            errorMessage = "";

            return _unitOfWork.Delete(entities);
        }
    }
}

